# Password indicator parameters
cracking_bots = 1 # number of computers doing parallell cracking
crack_speed = 1 # number of guesses per second
crack_time_text = 'Someone forgot this text' # tooltip text

#
# Evaluates the current password and displays an indicator of its strength.
#
evaluatePassword = (element) ->
	p = $("#user_plain").val()
	div = element.data 'strength'
	div_text = $("##{div} span")
	div = $("##{div}")
	
	if p.length == 0 or currentMode() == 'login'
		div.hide()
		return
	
	# determine keyspace size
	n = 0
	if p.match(/[a-z]/)
		n += 25
	if p.match(/[A-Z]/)
		n += 25
	if p.match(/[0-9]/)
		n += 10
	if p.match(/[^a-zA-Z0-9]/)
		n += 20
	
	c = Math.pow(n,p.length) / (cracking_bots * crack_speed)
	
	if c < 1
		div_text.text trans[locale]['notice.password.hint.very_short']
	else if c <= 60
		div_text.text hintText(c, 'seconds')
	else if c <= 60 * 60
		div_text.text hintText(c/60, 'minutes')
	else if c <= 60 * 60 * 24
		div_text.text hintText(c/(60*60), 'hours')
	else if c <= 60 * 60 * 24 * 7
		div_text.text hintText(c/(60*60*24), 'days')
	else if c <= 60 * 60 * 24 * 60
		div_text.text hintText(c/(60*60*24*7), 'weeks')
	else if c <= 60 * 60 * 24 * 365
		div_text.text hintText(c/(60*60*24*30), 'months')
	else if c <= 60 * 60 * 24 * 365 * 100
		div_text.text hintText(c/(60*60*24*365), 'years')
	else if c <= 60 * 60 * 24 * 365 * 100 * 100
		div_text.text hintText(c/(60*60*24*365*100), 'centuries')
	else
		div_text.text trans[locale]['notice.password.hint.very_long']
		
	div.show()
	
#
# Returns a localized text given an amount of time and unit.
#
hintText = (time, unit) ->
	time = Math.round time
	
	unit = 'x_'+unit
	if unit == 'x_hours' || unit == 'x_years'
		unit = 'about_'+unit
	
	u = trans[locale]['datetime.distance_in_words.'+unit+'.other']
	if time == 1
		u = trans[locale]['datetime.distance_in_words.'+unit+'.one']
	else
		u = u.replace "%{count}", time
	
	txt = trans[locale]['notice.password.hint.text'];
	txt.replace "%{time}", u

#
# Hashes the password in the form.
# The email is used as a salt.
#
# param @header
#   Whether to hash the header form or a body form
#
hashPasswords = ->
	plain = $('#user_plain')
	plain_confirm = $('#user_plain_confirmation')
	plain_current = $('#user_current_plain')
	hashed = $('#user_password')
	hashed_confirm = $('#user_password_confirmation')
	hashed_current = $('#user_current_password')
	mail = $('#user_email')
	
	do_password = plain.length != 0 and plain.val() != null and plain.val().length != 0
	do_confirm = plain_confirm.length != 0 and plain_confirm.val() != null and plain_confirm.val().length != 0
	do_current = plain_current.length != 0 and plain_current.val() != null and plain_current.val().length != 0
	
	if mail != null and mail.length != 0
		salt = mail.val()
		if do_password
			hashed.val hash(plain.val() + salt, "sha256")
		if do_confirm
			hashed_confirm.val hash(plain_confirm.val() + salt, "sha256")
		if do_current
			hashed_current.val hash(plain_current.val() + salt, "sha256")

#
# Clear all plaintext passwords.
#
clearPasswords = ->
	$('#user_plain').val ''
	$('#user_plain_confirmation').val ''
	$('#user_current_plain').val ''
	
#
# Get the current mode from the URL.
# Returns either 'login' or 'join'.
#
currentMode = ->
	mode = window.location.hash.substring 1
	if mode == ''
		mode = switch window.location.pathname
			when '/join', '/user', '/user/sign_up' then 'join'
			when '/login', '/user/sign_in' then 'login'
			else 'unknown'
	mode

#
# Update the page according to the current mode.
#
refreshLoginMode = ->		
	if currentMode() == 'join'
		form_url = $('#login #new_user').data 'join-url'
		$("#login [data-mode='join']").show()
		$("#login [data-mode='login']").hide()
	else
		form_url = $('#login #new_user').data 'login-url'
		$("#login [data-mode='login']").show()
		$("#login [data-mode='join']").hide()
		
	$('#login #new_user').attr 'action', form_url
	
#
# Switch mode and refresh page.
#
toggleLoginMode = ->
	window.location.hash = `currentMode() == 'join' ? 'login' : 'join'`
	refreshLoginMode()
	
#
# Submit the login form.
#
# First hash the passwords, then clear the plaintext passwords, then submit the form.
#
submitLoginForm = (element) ->
	hashPasswords()
	clearPasswords()
	element.closest('form').submit()
	
#
# Determine if the user pressed enter, given an event from a key press.
#
@pressedEnter = (event) ->
	if window.event
		keycode = window.event.keyCode;
	else if event
		keycode = event.which;
	else
		return false
		
	keycode == 13
	
#
# Determine if the user pressed enter, given an event from a key press.
#
@pressedEscape = (event) ->
	if window.event
		keycode = window.event.keyCode;
	else if event
		keycode = event.which;
	else
		return false
		
	keycode == 27
		
#
# Send Ajax request when a checkbox is clicked (changed).
#
checkboxClicked = (element) ->
	isChecked = element.is(':checked')
	data = "#{element.attr('name')}=#{isChecked}"
	url = element.data('ajax-url')
	
	$.ajax {
		url: url,
		type: 'PATCH',
		data: data,
		error: (jqXHR) ->
			if jqXHR.status != 200
				element.prop('checked', !isChecked)
	}
	
#
# Initialize the password indicator parameters.
#
@initPasswordIndicator = (bots, speed, tooltip_text) ->
	cracking_bots = bots
	crack_speed = speed
	crack_time_text = tooltip_text
	
$(document).on 'contentReady', () ->
	refreshLoginMode()
	$("#login [data-button='toggle']").when 'click.form.toggle', (event) ->
		toggleLoginMode()
	$("form [data-button='submit']").when 'click.form.submit', (event) ->
		submitLoginForm $(this)
	$("form [data-strength]").when 'keyup.form.strength', (event) ->
		evaluatePassword $(this)
	$("form [data-submitOnEnter]").when 'keydown.form.submit', (event) ->
		if pressedEnter event
			submitLoginForm $(this)
	$("#crack-time-img").qtip {
		content: crack_time_text,
		style: 'qtip-light qtip-shadow'
	}
	$('textarea').autosize()
	for dd in $('[data-imageselect]')
		dd = $(dd)
		h = dd.data 'imageheight'
		w = dd.data 'imagewidth'
		options = {}
		options['imageWidth'] = w if typeof w != 'undefined'
		options['imageHeight'] = h if typeof h != 'undefined'
		dd.ddslick options
		
	$('input[type=checkbox][data-ajax-url]').when 'click.form.check', (event) ->
		checkboxClicked $(this)
		
$(document).ajaxComplete ->
	$('input[autofocus]').focus()